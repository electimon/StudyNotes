* 帮助
  #+begin_src shell
    usage: repo COMMAND [ARGS]
    The complete list of recognized repo commands are:
      abandon        Permanently abandon a development branch
      branch         View current topic branches
      branches       View current topic branches
      checkout       Checkout a branch for development cherry-pick    Cherry-pick a change.  diff           Show changes between commit and working tree
      diffmanifests  Manifest diff utility
      download       Download and checkout a change
      forall         Run a shell command in each project
      grep           Print lines matching a pattern
      help           Display detailed help on a command
      info           Get info on the manifest branch, current branch or unmerged branches
      init           Initialize repo in the current directory
      list           List projects and their associated directories
      manifest       Manifest inspection utility
      overview       Display overview of unmerged project branches
      prune          Prune (delete) already merged topics
      rebase         Rebase local branches on upstream branch
      selfupdate     Update repo to the latest version
      smartsync      Update working tree to the latest known good revision
      stage          Stage file(s) for commit
      start          Start a new branch for development(创建一个新的开发分支)
      status         Show the working tree status
      sync           Update working tree to the latest revision
      upload         Upload changes for code review
      version        Display the version of repo
    See 'repo help <command>' for more information on a specific command.
  #+end_src
* 切分支
  + 方法一
    repo forall -c "git checkout MSM8909_KAIOS_GFLIP2_DEV_ATT_TA"
  + 方法二
    #+begin_src bash
      当本地已经有个Tron的工程，如何切换代码为IDOL4 PRO CN的工程？ 只要每个工程下没有特殊改动，直接重新repo init新的分支下载即可。
          repo init -b bb/develop/tcl/jdm/aospo/app-hoperun #切换本地分支
          repo init -m <new branch manfiest.xml>
          repo sync
      如果担心原有代码影响，可以先删除代码。
          rm -rf *  #只删除可见文件，.repo依然保留
          repo init -m <new branch manfiest.xml>
          repo sync
    #+end_src
* 创建分支
  repo branches wildbook
* 查看分支
  + 方法一
    到某个仓库里，然后执行命令
    git branch -a #可以看到git的分支，同时也是repo的分支
  + 方法二
    repo branches
* 下载单个仓库
  例如：.repo/manifest.xml文件中的<project name="blackberry/vendor/bbry/porting" path="vendor/bbry"/>
  仓库名："blackberry/vendor/bbry/porting"
  工程路径："vendor/bbry"
  repo sync -c --no-tags vendor/bbry
* sync
  #+begin_src bash
      -h, --help            帮助
      -f, --force-broken    continue sync even if a project fails to sync
      -l, --local-only      only update working tree, don't fetch
      -n, --network-only    fetch only, don't update working tree
      -d, --detach          detach projects back to manifest revision
      -c, --current-branch  只下载指定分支代码
      -q, --quiet           be more quiet
      -j JOBS, --jobs=JOBS  projects to fetch simultaneously (default 1)
      -m NAME.xml, --manifest-name=NAME.xml
                            temporary manifest to use for this sync
      --no-clone-bundle     disable use of /clone.bundle on HTTP/HTTPS
      -u MANIFEST_SERVER_USERNAME, --manifest-server-username=MANIFEST_SERVER_USERNAME
                            username to authenticate with the manifest server
      -p MANIFEST_SERVER_PASSWORD, --manifest-server-password=MANIFEST_SERVER_PASSWORD
                            password to authenticate with the manifest server
      --fetch-submodules    fetch submodules from server
      --no-tags             不下载tag
      -s, --smart-sync      smart sync using manifest from a known good build
      -t SMART_TAG, --smart-tag=SMART_TAG
                            smart sync using manifest from a known tag

      repo Version options:
        --no-repo-verify    do not verify repo source code

  #+end_src
* init
  #+begin_src bash
  repo init
     -u：指定一个URL，其连接到一个maniest仓库
     -m ：在manifest仓库中选择一个xml文件
     -b：选择一个maniest仓库中的一个特殊的分支
     --repo-url:设定repo的版本库地址。
     --repo-branch:设定需要检出的分支。
     --no-repo-verify:设定不要对repo的里程碑签名进行严格的验证。
     --mirror：只在repo第一次初始化的时候使用，建立本地镜像
  #+end_src
* download
  repo download
  repo download SW_ASUS_Q/platform/vendor/qcom/proprietary 2419 #项目名 CHANGEID
* upload
  repo upload
  repo upload SW_ASUS_Q/platform/vendor/qcom/proprietary 2419 #项目名 CHANGEID
* diff
* prune
* start
* status
* forall
  #+begin_src bash
  repo forall -c 'ID=`Git log --before="2016-06-28 23:00" -1 --pretty=format:"%H"`;git reset --hard $ID;git clean -df' #回退到2016-06-28版本
  #+end_src
