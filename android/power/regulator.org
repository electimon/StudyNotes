* regulator
** 代码
   Documentation/devicetree/bindings/regulator/rpmh-regulator.txt
   arch/arm64/boot/dts/qcom/sdm670-regulator.dtsi
   drivers/regulator/rpmh-regulator.c
** regulator的get/put接口
   regulator_get / regulator_put               正常的get,非独占、可重复
   devm_regulator_get / devm_regulator_put     正常的get,非独占、可重复
   regulator_get_exclusive                     独占的get,独占、不可重复
   devm_regulator_get_exclusive
   regulator_get_optional                      optional的get，非独占、不可重复get
   devm_regulator_get_optional
   调试节点：/d/regulator/
** regulator别名相关接口
   regulator_register_supply_alias
   regulator_unregister_supply_alias
   devm_regulator_register_supply_alias
   devm_regulator_unregister_supply_alias
   devm_regulator_bulk_register_supply_alias
** regulator的控制、状态获取接口
   regulator_enable/regulator_disable  开启/关闭电源
   regulator_force_disable             强制关闭电源
   regulator_is_enabled                判断电源是否开启
   regulator_disable_deferred          延时一段时间后关闭电源
   regulator_can_change_voltage
   regulator_count_voltages            返回电源使用次数
   regulator_list_voltage              返回能被设置的电压
   regulator_is_supported_voltage      检测是否支持该电压范围
   regulator_get_linear_step
   regulator_set_voltage               设置电压范围
   regulator_get_voltage               获取电压
   regulator_set_current_limit         设置电源输出电流限制
   regulator_get_current_limit         获取电源输出电流限制
   regulator_set_mode                  设置模式
   regulator_get_mode
   rdev_get_drvdata                    设置/获取driver的私有数据
   regulator_get_drvdata
   regulator_set_drvdata
* demo
  #+begin_src cpp
  //结构体
  struct flash_regulator_data {
    struct regulator	*regs;
    const char		*reg_name;
    u32			max_volt_uv;
  };
  struct flash_regulator_data	*reg_data;

  // 解析设备树
  flash_node->reg_data = devm_kzalloc(&led->pdev->dev,
            sizeof(struct flash_regulator_data *) *
              flash_node->num_regulators,
              GFP_KERNEL);
    if (!flash_node->reg_data) {
      dev_err(&led->pdev->dev,
          "Unable to allocate memory\n");
      return -ENOMEM;
    }



    for_each_child_of_node(node, temp) {
      rc = of_property_read_string(temp, "regulator-name",
                &temp_string);
      if (!rc)
        flash_node->reg_data[i].reg_name = temp_string;
      else {
        dev_err(&led->pdev->dev,
            "Unable to read regulator name\n");
        return rc;
      }

      rc = of_property_read_u32(temp, "max-voltage", &val);
      if (!rc) {
        flash_node->reg_data[i].max_volt_uv = val;
      } else if (rc != -EINVAL) {
        dev_err(&led->pdev->dev,
            "Unable to read max voltage\n");
        return rc;
      }

      i++;
    }


    //初始化regulator
		flash_node->reg_data[i].regs =
			regulator_get(flash_node->cdev.dev,
					flash_node->reg_data[i].reg_name);
		if (IS_ERR(flash_node->reg_data[i].regs)) {
			rc = PTR_ERR(flash_node->reg_data[i].regs);
			dev_err(&led->pdev->dev,
					"Failed to get regulator\n");
			goto error_regulator_setup;
		}

		if (regulator_count_voltages(flash_node->reg_data[i].regs)
									> 0) {
			rc = regulator_set_voltage(flash_node->reg_data[i].regs,
					flash_node->reg_data[i].max_volt_uv,
					flash_node->reg_data[i].max_volt_uv);
			if (rc) {
				dev_err(&led->pdev->dev,
					"regulator set voltage failed\n");
				regulator_put(flash_node->reg_data[i].regs);
				goto error_regulator_setup;
			}
		}

    //使能
		rc = regulator_enable(flash_node->reg_data[i].regs);
		regulator_disable(flash_node->reg_data[i].regs);
  #+end_src
