* DebugFS简介
  Debug文件系统是一种用于内核调试的虚拟文件系统,基于libfs库实现，专用于开发人员调试。
  + *Code*:
    kernel/include/linux/debugfs.h  *全局头文件*\\
    [[http://blog.csdn.net/rsljdkt/article/details/10307043][Linux内核空间-用户空间通信之debugfs]]
  + *dts*:\\
  + *docs*\\
  + *sysfs*:\\
    *sysfs*:\\
    *debugfs*:/sys/kernel/debug\\
    *proc*:\\
* debugfs.h
  + 创建
  #+begin_src cpp
  struct dentry *debugfs_create_file(const char *name, umode_t mode,
                     struct dentry *parent, void *data,
                     const struct file_operations *fops);
  /*
      功能：在debugfs文件系统中创建一个文件
      参数：name:被创建文件的文件名字
            mode:文件属性,例如0644
            parent:父目录,如果为空，在debugfs根目录下创建
            data:回调函数中的数据
            fops:文件操作函数集
      返回值：成功返回指针，失败返回NULL,并产生error码
      注意：使用debugfs_remove()释放文件,返回-ENODEV，说明内核没开启debugfs
  */
  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_create_dir(const char *name, struct dentry *parent);
  /*
      功能：在debugfs文件系统中创建一个文件夹
      参数：
          name:被创建文件夹的名字
          parent:父目录,如果为空，在debugfs根目录下创建
      返回值：成功返回指针，失败返回NULL,并产生error码
      注意：使用debugfs_remove()释放文件夹,返回-ENODEV，说明内核没开启debugfs
  */
  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_create_symlink(const char *name, struct dentry *parent,
                        const char *dest);
  /*
      功能：在debugfs文件系统中创建一个符号链接
      参数：
          name:被创建符号链接文件的名字
          parent:父目录,如果为空，在debugfs根目录下创建
          dest:指向被符号链接路径的字符串
      返回值：成功返回指针，失败返回NULL,并产生error码
      注意：使用debugfs_remove()释放文件夹,返回-ENODEV，说明内核没开启debugfs
  */
  #+end_src
  #+begin_src cpp
  void debugfs_remove(struct dentry *dentry);
  /*
      功能：删除debugfs文件系统的文件或文件夹
      参数：
          dentry:被删除的文件或文件j夹
  */
  #+end_src
  #+begin_src cpp
  void debugfs_remove_recursive(struct dentry *dentry);
  /*
      功能：递归删除debugfs文件系统的目录
      参数：
          dentry:被递归删除的文件夹
  */
  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_rename(struct dentry *old_dir, struct dentry *old_dentry,
                  struct dentry *new_dir, const char *new_name);
  /*
      功能：在debugfs文件系统中重命名文件或文件夹
      参数：
          old_dir:被重命名对象的父目录
          old_dentry:被重命名对象
          new_dir:新对象的父目录
          new_name:新对象的名字
      返回值：成功返回指针，失败返回NULL,并产生error码
      注意：返回-ENODEV，说明内核没开启debugfs
  */
  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_create_u8(const char *name, umode_t mode,
                   struct dentry *parent, u8 *value);
  struct dentry *debugfs_create_u16(const char *name, umode_t mode,
                    struct dentry *parent, u16 *value);
  struct dentry *debugfs_create_u32(const char *name, umode_t mode,
                    struct dentry *parent, u32 *value);
  struct dentry *debugfs_create_u64(const char *name, umode_t mode,
                    struct dentry *parent, u64 *value);
  /*
      功能：创建一个用于读取和写入无符号(8,16,32,64)位值的debugfs文件
      参数：
          name:被创建文件的名字
          mode:文件属性,例如0644
          parent:父目录,如果为空，在debugfs根目录下创建
          value:读和写的变量值
      返回值：成功返回指针，失败返回NULL,并产生error码
      注意：使用debugfs_remove()释放文件,返回-ENODEV，说明内核没开启debugfs
  */
  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_create_x8(const char *name, umode_t mode,
                   struct dentry *parent, u8 *value);
  struct dentry *debugfs_create_x16(const char *name, umode_t mode,
                    struct dentry *parent, u16 *value);
  struct dentry *debugfs_create_x32(const char *name, umode_t mode,
                    struct dentry *parent, u32 *value);
  struct dentry *debugfs_create_x64(const char *name, umode_t mode,
                    struct dentry *parent, u64 *value);
  /*
      功能：创建一个用于读取和写入无符号(8,16,32,64)位值的debugfs文件
            功能和上面函数有点类似,但它显示是以16进制
      参数：同debugfs_create_u8()
      返回值：成功返回指针，失败返回NULL,并产生error码
      注意：使用debugfs_remove()释放文件,返回-ENODEV，说明内核没开启debugfs
  */
  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_create_size_t(const char *name, umode_t mode,
                       struct dentry *parent, size_t *value);
  /*
      功能：创建一个用于读取和写入size_t位值的debugfs文件
            功能和上面函数有点类似
  */

  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_create_atomic_t(const char *name, umode_t mode,
                       struct dentry *parent, atomic_t *value);
  /*
      功能：创建一个用于读取和写入原子值的debugfs文件(原子操作)
      参数：
          name:被创建文件的名字
          mode:文件属性,例如0644
          parent:父目录,如果为空，在debugfs根目录下创建
          value:读和写的变量值
      返回值：成功返回指针，失败返回NULL,并产生error码
      注意：使用debugfs_remove()释放文件,返回-ENODEV，说明内核没开启debugfs
  */
  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_create_bool(const char *name, umode_t mode,
                    struct dentry *parent, u32 *value);
  /*
      功能：创建一个用于读取和写入bool值的debugfs文件
  */
  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_create_blob(const char *name, umode_t mode,
                    struct dentry *parent,
                    struct debugfs_blob_wrapper *blob);
  /*
      功能：在debugfs文件系统中创建一个可读的二进制数据快
      参数：
          name:被创建文件夹的名字
          mode:文件属性
          parent:父目录,如果为空，在debugfs根目录下创建
          blob:块数据，包含数据大小和数据
      返回值：成功返回指针，失败返回NULL,并产生error码
      注意：使用debugfs_remove()释放文件夹,返回-ENODEV，说明内核没开启debugfs
  */
  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_create_regset32(const char *name, umode_t mode,
                       struct dentry *parent,
                       struct debugfs_regset32 *regset);
  /*创建一个寄存器文件*/
  #+end_src
  #+begin_src cpp
  int debugfs_print_regs32(struct seq_file *s, const struct debugfs_reg32 *regs,
               int nregs, void __iomem *base, char *prefix);
  #+end_src
  #+begin_src cpp
  struct dentry *debugfs_create_u32_array(const char *name, umode_t mode,
                      struct dentry *parent,
                      u32 *array, u32 elements);
  /*
      功能：在debugfs文件系统中创建一个可读的无符号整型的数组
      参数：
          name:被创建文件的名字
          mode:文件属性
          parent:父目录,如果为空，在debugfs根目录下创建
          array:无符号整型的数组
          elements:数组中的元素个数
      返回值：成功返回指针，失败返回NULL,并产生error码
      注意：使用debugfs_remove()释放文件夹,返回-ENODEV，说明内核没开启debugfs
  */
  #+end_src
  #+begin_src cpp
  bool debugfs_initialized(void);
  /*
      功能：判断debugfs文件系统是否被注册
      返回值：ture已经注册，flase没有注册
  */
  #+end_src
* debug
  #+begin_src cpp
  mount -t debugfs none /sys/kernel/debug
  #+end_src
* 案例
  此例子为usb框架中的案例
  #+begin_src cpp
  struct dentry *usb_debug_root;
  EXPORT_SYMBOL_GPL(usb_debug_root);


  const struct file_operations usbfs_devices_fops = {
    .llseek =	usb_device_lseek,
    .read =		usb_device_read,
    .poll =		usb_device_poll,
  };

  static struct dentry *usb_debug_devices;

  static int usb_debugfs_init(void)
  {
    usb_debug_root = debugfs_create_dir("usb", NULL);
    if (!usb_debug_root)
      return -ENOENT;

    usb_debug_devices = debugfs_create_file("devices", 0444,
              usb_debug_root, NULL,
              &usbfs_devices_fops);
    if (!usb_debug_devices) {
      debugfs_remove(usb_debug_root);
      usb_debug_root = NULL;
      return -ENOENT;
    }

    return 0;
  }

  static void usb_debugfs_cleanup(void)
  {
    debugfs_remove(usb_debug_devices);
    debugfs_remove(usb_debug_root);
  }
  #+end_src
