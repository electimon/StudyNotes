* Table of Contents :TOC_4_gh:noexport:
- [[#bringup-audio][bringup audio]]
  - [[#检查adsp是否正常][检查ADSP是否正常]]
  - [[#检查slimbus是否正常][检查SLIMbus是否正常]]
  - [[#检查sound是否注册][检查sound是否注册]]
  - [[#用tinymixtinycaptinyplay验证playbackrecording][用tinymix,tinycap,tinyplay验证playback/recording]]
  - [[#参考文档][参考文档]]
- [[#添加新的acdb文件][添加新的acdb文件]]
  - [[#目的][目的]]
  - [[#思路][思路]]
  - [[#需要修改以下文件][需要修改以下文件]]
  - [[#步骤如下][步骤如下]]
  - [[#总结][总结]]
- [[#添加新的音频设备][添加新的音频设备]]
  - [[#的][的]]
  - [[#方法][方法]]
  - [[#专有名词][专有名词]]
- [[#添加新的xml文件][添加新的xml文件]]
  - [[#思路-1][思路]]
- [[#查看具体使用哪个acdbxml文件][查看具体使用哪个acdb、xml文件]]
- [[#audio-tuning调试][audio tuning调试]]
  - [[#audio-audio][audio audio]]
    - [[#audio-playback][audio Playback]]
    - [[#audio-recording][audio Recording]]
  - [[#audio-voice][audio Voice]]
    - [[#rx][RX]]
    - [[#tx][TX]]
- [[#音频问题分析][音频问题分析]]
  - [[#track][track]]
  - [[#a2dp][a2dp]]
- [[#在speaker-and-headphones修改声音大小无效的解决方法][在"speaker-and-headphones"修改声音大小无效的解决方法]]
- [[#audio-recording-1][Audio Recording]]
- [[#fm][FM]]
- [[#bt][bt]]
- [[#usb--af][usb + AF]]
- [[#与audio相关的系统属性][与audio相关的系统属性]]
- [[#fs][fs]]
- [[#参考文档-1][参考文档]]

* bringup audio
** 检查ADSP是否正常
   #+begin_src cpp
   adsp_loader_probe: Q6/ADSP image is loaded
   #+end_src
** 检查SLIMbus是否正常
   #+begin_src cpp
   SLIM SAT: Received master capability
   #+end_src
** 检查sound是否注册
   #+begin_src cpp
   cat /proc/asound/cards
   #+end_src
** 用tinymix,tinycap,tinyplay验证playback/recording
   #+begin_src cpp
   echo "file sound/soc/soc-dapm.c +p" >/sys/kernel/debug/dynamic_debug/control              #Dynamic Audio Power Management 动态音频电源管理
   echo "file sound/soc/msm/msm8952-slimbus.c +p" >/sys/kernel/debug/dynamic_debug/control   #SLIMbus相关
   echo "file sound/soc/msm/msm8952.c +p" >/sys/kernel/debug/dynamic_debug/control           #
   echo "file sound/soc/codecs/msm8x16-wcd.c +p" >/sys/kernel/debug/dynamic_debug/control    #内部codec
   echo "file sound/soc/codecs/msm8916-wcd-irq.c +p" >/sys/kernel/debug/dynamic_debug/control #内部声卡中断
   #+end_src
** 参考文档
   #+begin_src cpp
   80-na157-193_f_linux_android_audio_customization_and_debugging_guide.pdf 客制化
   #+end_src
* 添加新的acdb文件
** 目的
   以msm8937为例子，在/vendor/etc/acdbdata/MTP/NonCE目录下添加新的acdb文件,NonCE目录不存在
** 思路
   1. 把acdb文件复制到vendor/qcom/proprietary/mm-audio-cal/audcal/acdbdata/8937/MTP/NonCE/
   2. 让添加的acdb文件参加编译，使文件copy到对应的目录
   3. 让android系统加载新的acdb文件
** 需要修改以下文件
   #+begin_src cpp
   vendor/qcom/proprietary/mm-audio-cal/audcal/acdbdata/8937/MTP/NonCE/
   vendor/qcom/proprietary/mm-audio-cal/audcal/acdbdata/8937/Android.mk
   vendor/qcom/proprietary/vendor/qcom/proprietary/common/config/device-vendor.mk
   #+end_src
** 步骤如下
   1. 将acdb文件拷贝到vendor/qcom/proprietary/mm-audio-cal/audcal/acdbdata/8937/MTP/NonCE/目录下
   2. 在文件vendor/qcom/proprietary/mm-audio-cal/audcal/acdbdata/8937/Android.mk中建立编译规制，以下以拷贝MTP_NonCE_Bluetooth_cal.acdb为例
      #+begin_src cpp
      +include $(CLEAR_VARS)
      +LOCAL_MODULE            := MTP_NonCE_Bluetooth_cal.acdb
      +LOCAL_MODULE_FILENAME   := Bluetooth_cal.acdb
      +LOCAL_MODULE_TAGS       := optional
      +LOCAL_MODULE_CLASS      := ETC
      +LOCAL_MODULE_PATH       := $(TARGET_OUT_VENDOR_ETC)/acdbdata/MTP/NonCE/
      +LOCAL_SRC_FILES         := MTP/NonCE/Bluetooth_cal.acdb
      +include $(BUILD_PREBUILT)
      #+end_src
   3. 将编译规则添加到vendor/qcom/proprietary/vendor/qcom/proprietary/common/config/device-vendor.mk文件中
      #+begin_src cpp
      +MM_AUDIO += MTP_NonCE_Bluetooth_cal.acdb
      #+end_src
   4. 让系统加载acdb文件,修改acdb-loader/src/acdb-loader.c
** 总结
   编译依赖关系
   PRODUCT_PACKAGES -> MM_AUDIO -> MTP_NonCE_Bluetooth_cal.acdb
* 添加新的音频设备
** 的
   添加新音频设备的过程。主要配置了xml文件、platform.c和acdb文件
** 方法
   添加设备、校准设备
   1. 添加设备
      1. 在音频校准数据库（ACDB）文件中添加设备条目并更新设备的校准数据
      2. 如果新设备是在voice call，VoIP或VoLTE call中选择的Tx或Rx，请在ACDB文件中添加适当的设备对。
      3. 将混音器控制(mixer control)定义和路径定义添加到具有所需序列的混音器路径XML文件中。
      4. 在platform.h和platform.c中添加一个条目到device_table。
      5. 将硬件中的设备ACDB设备ID包含在platform.c文件中的acdb_device_table
      6. 将device_table中提到的设备名称映射到Android设备。这需要更改hardware/qcom/audio/hal/msm8916/platform.c文件中的platform_get_output_snd_device()函数。
   2. Device table
      hardware/qcom/audio/hal/msm8916/platform.h  #SND_DEVICE_OUT_BEGIN附近
      hardware/qcom/audio/hal/msm8916/platform.c  #device_table
   3. Mixer path XML
      device/qcom/msm8916_32/mixer_paths.xml
      hardware/qcom/audio/configs/msm8937/mixer_paths.xml
   4. ACDB device ID table
      hardware/qcom/audio/hal/msm8916/platform.c  #acdb_device_table
      用到工具QACT™
   5. LOG抓取
** 专有名词
   |------+-----------------------------+----------------|
   | ACDB | Audio Calibration Data Base | 音频校准数据库 |
* 添加新的xml文件
** 思路
   1. 添加新的xml文件到hardware/qcom/audio/configs/msm8937/
   2. 让xml文件参加编译，使文件copy到对应的目录
   3. 让android系统加载新的xml文件
      修改hardware/qcom/audio/hal/msm8916/platform.c
* 查看具体使用哪个acdb、xml文件
  mixer_paths_mtp.xml
  adb logcat |grep -e mixer -e acdb #开机查看命令
* audio tuning调试
  需要听的几个点,确认audio tuning哪几个地方出现问题
** audio audio
*** audio Playback
    + SPK:152E -> 152F -> 1530 -> 1531 -> 1586
      # RX Audio decoder input signal, before POPP
      .isf.0x152E.pcm.0x10101600.0x1.0x1.rx.wav
      .isf.0x152E.pcm.0x10101600.0x1.0x2.rx.wav
      .isf.0x152E.pcm.0x20101700.0x1.0x1.rx.wav
      .isf.0x152E.pcm.0x20101700.0x1.0x2.rx.wav

      # RX Audio POPP input signal, after audio decoder
      .isf.0x152F.pcm.0x10101600.0x1.0x1.rx.wav
      .isf.0x152F.pcm.0x10101600.0x1.0x2.rx.wav
      .isf.0x152F.pcm.0x20101700.0x1.0x1.rx.wav
      .isf.0x152F.pcm.0x20101700.0x1.0x2.rx.wav

      # RX Audio COPP input signal, before entering into AFE, after Audio POPP
      .isf.0x1530.pcm.0x20101700.0x1.0x1.rx.wav
      .isf.0x1530.pcm.0x20101700.0x1.0x2.rx.wav

      # RX Audio COPP input signal, before entering into AFE, after Audio POPP
      .isf.0x1531.pcm.0xF0.0x1.0x3.rx.wav
      .isf.0x1531.pcm.0xF1.0x1.0x3.rx.wav

      # RX AFE output signal, before sending into Codec
      .isf.0x1586.pcm.0xF.0x1100.0x1.rx.wav
*** audio Recording
    + MIC:1586 -> 1532 -> 1533 -> 1534 -> 1535 -> 1536
      # Audio COPreP input(0x1532)
      .isf.0x1532.pcm.0x8050.0x1.0x3.tx.wav

      # Audio TX matrtx input(0x1533)
      .isf.0x1533.pcm.0x8050.0x1.0x3.tx.wav

      # TX Audio POPreP input signal, after Audio Common Pre-processing
      .isf.0x1534.pcm.0x30101800.0x1.0x1.tx.wav
      .isf.0x1534.pcm.0x30101800.0x1.0x2.tx.wav

      # TX Audio encoder input signal, after Audio Record Pre-processing
      .isf.0x1535.pcm.0x10101600.0x1.0x1.tx.wav
      .isf.0x1535.pcm.0x10101600.0x1.0x2.tx.wav
      .isf.0x1535.pcm.0x30101800.0x1.0x1.tx.wav
      .isf.0x1535.pcm.0x30101800.0x1.0x2.tx.wav

      # TX encoder output signal, after COPreP & POPreP
      .isf.0x1536.pcm.0x30101800.0x2.0x1.tx.wav
      .isf.0x1536.pcm.0x30101800.0x2.0x2.tx.wav

      # TX AFE input signal, from Codec output
      .isf.0x1586.pcm.0x5.0x1105.0x1.tx.wav
** audio Voice
*** RX
*** TX 
* 音频问题分析
** track
** a2dp
* 在"speaker-and-headphones"修改声音大小无效的解决方法
  #+begin_src html
  <!--修改文件audio_platform_info.xml -->
  +    <backend_names>
  +        <device name="SND_DEVICE_OUT_SPEAKER_AND_HEADPHONES" backend="speaker-and-headphones" interface="PRI_MI2S_RX-and-PRI_MI2S_RX"/>
  +    </backend_names>

         <ctl name="PRI_MI2S_RX Audio Mixer MultiMedia5" value="1" />
       </path>

  <!--修改文件mixer_paths_xxxx.xml -->
  +    <path name="low-latency-playback speaker-and-headphones">
  +      <ctl name="PRI_MI2S_RX Audio Mixer MultiMedia5" value="1" />
  +      <ctl name="RX3 Digital Volume" value="102" />
  +    </path>
  +
  <!-- 解释 -->
  代码里会把"speaker-and-headphones"拆分成"speaker"和"headphone"。所以最终直接调用<path name="headphones" /> 和<path name="speaker" /> ，。并没有调用<path name="speaker-and-headphones"> ， 所以在这个里面设置volume不生效。
  下面的修改是给speaker,headphone双响时的audio route path 加一个后缀"speaker-and-headphones"。即原来是low-latency-playback，加了这个变为"low-latency-playback speaker-and-headphones"，在这个里面添加volume就可以了。
  + <device name="SND_DEVICE_OUT_SPEAKER_AND_HEADPHONES" backend="speaker-and-headphones" interface="PRI_MI2S_RX-and-PRI_MI2S_RX"/>
  #+end_src
* Audio Recording
  #+begin_src cpp
  #define LOG_NDEBUG 0
  #define VERY_VERBOSE_LOGGING
  frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp #MediaPlayerService
  frameworks/av/media/libmediaplayerservice/StagefrightRecorder.cpp #StagefrightRecorder
  frameworks/av/media/libaudioclient/AudioSystem.cpp #AudioSystem
  frameworks/av/media/libaudioclient/AudioRecord.cpp #AudioRecord
  frameworks/av/media/libmedia/IOMX.cpp #IOMX
  frameworks/av/media/libstagefright/AudioSource.cpp #AudioSource
  frameworks/av/media/libstagefright/MPEG4Writer.cpp #MPEG4Writer
  frameworks/av/media/libstagefright/OMXClient.cpp #OMXClient
  frameworks/av/services/audioflinger/AudioFlinger.cpp #AudioFlinger
  frameworks/av/media/libaudioprocessing/AudioMixer.cpp #AudioMixer
  frameworks/av/services/audiopolicy/service/AudioPolicyService.cpp #AudioPolicyService
  #+end_src
* FM
  hardware/qcom/audio/hal/audio_extn/fm.c #audio_hw_fm
  frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp #MediaPlayerService
  frameworks/av/media/libmediaplayerservice/StagefrightRecorder.cpp #StagefrightRecorder
  frameworks/av/media/libaudioclient/AudioSystem.cpp #AudioSystem
  frameworks/av/media/libaudioclient/AudioTrack.cpp #AudioTrack
  frameworks/av/media/libmedia/mediaplayer.cpp #MediaPlayerNative
  frameworks/av/media/libstagefright/AudioPlayer.cpp #AudioPlayer
  frameworks/av/media/extractors/mp3/MP3Extractor.cpp #MP3Extractor
  frameworks/av/media/libstagefright/OMXClient.cpp #OMXClient
  frameworks/av/services/audioflinger/AudioFlinger.cpp #AudioFlinger
  frameworks/av/media/libaudioprocessing/AudioMixer.cpp #AudioMixer
  frameworks/av/services/audiopolicy/service/AudioPolicyService.cpp #AudioPolicyService
  hardware/qcom/audio/hal/audio_hw.c #audio_hw_primary
  hardware/qcom/audio/hal/msm8916/platform.c #msm8916_platform
  hardware/qcom/audio/hal/msm8916/hw_info.c #hardware_info
  frameworks/av/services/audiopolicy/managerdefault/AudioPolicyManager.cpp #APM_AudioPolicyManager
  vendor/qcom/opensource/audio/policy_hal/AudioPolicyManager.cpp #AudioPolicyManagerCustom
  #FMRadio
  #FMService
  system/media/audio/include/system/audio.h
  system/media/audio/include/system/audio-base.h
  vol  = lrint((value * 0x1D08) + 0.5); #改变声音
* bt
  system/bt/audio_a2dp_hw/ =>"bt_a2dp_hw"
  vendor/qcom/opensource/commonsys/system/bt/audio_a2dp_hw/
  vendor/etc/a2dp_audio_policy_configuration.xml
  out/target/product/msm8937_64/system/lib64/android.hardware.bluetooth.a2dpy@1.0.so
  out/target/product/msm8937_64/system/lib64/hw/audio.a2dp.default.so
* usb + AF
    #+begin_src cpp
    #define LOG_NDEBUG 0
    #define VERY_VERBOSE_LOGGING 
    frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp #MediaPlayerService
    frameworks/av/media/libmedia/mediaplayer.cpp #MediaPlayerNative
    frameworks/av/media/libstagefright/AudioPlayer.cpp #AudioPlayer
    frameworks/av/media/extractors/mp3/MP3Extractor.cpp #MP3Extractor
    frameworks/av/media/libstagefright/OMXClient.cpp #OMXClient
    frameworks/av/media/libaudioclient/AudioSystem.cpp #AudioSystem
    frameworks/av/media/libaudioclient/AudioTrack.cpp #AudioTrack
    frameworks/av/media/libaudioclient/AudioRecord.cpp #AudioRecord
    frameworks/av/media/libaudioclient/AudioTrackShared.cpp #AudioTrackShared
    frameworks/av/media/libaudioprocessing/AudioMixer.cpp #AudioMixer
    frameworks/av/services/audioflinger/AudioFlinger.cpp #AudioFlinger
    frameworks/av/services/audioflinger/Threads.cpp #AudioFlinger
    frameworks/av/services/audioflinger/Tracks.cpp #AudioFlinger
    #+end_src
  + APM
    #+begin_src cpp
    #define LOG_NDEBUG 0
    #define VERY_VERBOSE_LOGGING 
    frameworks/av/services/audiopolicy/service/AudioPolicyService.cpp #AudioPolicyService
    frameworks/av/services/audiopolicy/service/AudioPolicyInterfaceImpl.cpp #AudioPolicyIntefaceImpl
    frameworks/av/services/audiopolicy/managerdefault/AudioPolicyManager.cpp #APM_AudioPolicyManager
    vendor/qcom/opensource/audio/policy_hal/AudioPolicyManager.cpp #AudioPolicyManagerCustom
    frameworks/av/services/audiopolicy/enginedefault/src/Engine.cpp #or APM::AudioPolicyEngine
    frameworks/av/services/audiopolicy/engineconfigurable/src/Engine.cpp #APM::AudioPolicyEngine
    frameworks/av/services/audiopolicy/common/managerdefinitions/src/Gains.cpp #APM::Gains
    #+end_src
  + HAL
    #+begin_src cpp
    /**
    Check whether there is DYNAMIC_LOG_ENABLED in below codes.
    Remove the DYNAMIC_LOG_ENABLED related codes，for example: 
    #undef DYNAMIC_LOG_ENABLED
    */
    #define LOG_NDEBUG 0
    #define VERY_VERY_VERBOSE_LOGGING 
    hardware/libhardware/modules/usbaudio/audio_hal.c #modules.usbaudio.audio_hal
    hardware/qcom/audio/hal/audio_extn/usb.c #audio_hw_usb
    hardware/qcom/audio/hal/audio_hw.c #audio_hw_primary
    hardware/qcom/audio/hal/msm8916/platform.c #msm8916_platform
    hardware/qcom/audio/hal/msm8916/hw_info.c #hardware_info
    hardware/qcom/audio/hal/audio_extn/utils.c #audio_hw_utils
    hardware/qcom/audio/hal/audio_extn/audio_extn.c #audio_hw_extn
    hardware/qcom/audio/hal/audio_extn/spkr_protection.c #audio_hw_spkr_prot
    system/media/audio_route/audio_route.c #audio_route
    @@ -579,6 +579,7 @@ int audio_route_apply_path(struct audio_route *ar, const char *name)
    }
    path_apply(ar, path);
    + path_print(ar, path); //this prints the details device & audio route configuration

    return 0;
    } 
    #+end_src
* 与audio相关的系统属性
  | 属性                                 | 说明 |
  |--------------------------------------+------|
  | ro.qc.sdk.audio.ssr                  |      |
  | ro.qc.sdk.audio.fluencetype=none     |      |
  | ersist.audio.fluence.voicecall=true  |      |
  | persist.audio.fluence.voicerec=false |      |
  | persist.audio.fluence.speaker=true   |      |
  | tunnel.audio.encode=true             |      |
  | af.resampler.quality=4               |      |
  | audio.offload.buffer.size.kb=32      |      |
  | av.offload.enable                    |      |
  | use.voice.path.for.pcm.voip=true     |      |
  | audio.offload.gapless.enabled=false  |      |
  | persist.speaker.prot.enable=false    |      |
  | qcom.hw.aac.encoder                  |      |
  | audio.offload.disable                |      |
  | persist.headset.anc.type             |      |
  | ssr.pcmdump                          |      |
  | persist.debug.sf.noaudio             |      |
  | media.aac_51_output_enabled          |      |
  | media.wfd.use-pcm-audio              |      |
* fs
  //app
  localAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE); //获取AudioManager服务
  localAudioManager.setSpeakerphoneOn(true); //frameworks/base/media/java/android/media/AudioManager.java 设置Speaker

  // setSpeakerphoneOn(boolean on)  frameworks/base/media/java/android/media/AudioManager.java
  final IAudioService service = getService();
  service.setSpeakerphoneOn(on);

  //setSpeakerphoneOn  frameworks/base/services/core/java/com/android/server/audio/AudioService.java
  sendMsg(mAudioHandler, MSG_SET_FORCE_USE, SENDMSG_QUEUE, AudioSystem.FOR_COMMUNICATION, mForcedUseForComm, eventSource, 0);
  handleMessage()
  setForceUse()
  setForceUseInt_SyncDevices()

  setForceUse()  frameworks/base/services/core/java/com/android/server/audio/AudioService.java
  android_media_AudioSystem_setForceUse() //frameworks/base/core/jni/android_media_AudioSystem.cpp
  AudioSystem::setForceUse()     frameworks/av/media/libaudioclient/AudioSystem.cpp
  AudioPolicyService::setForceUse() frameworks/av/services/audiopolicy/service/AudioPolicyInterfaceImpl.cpp
  AudioPolicyManagerCustom::setForceUse() vendor/qcom/opensource/audio/policy_hal/AudioPolicyManager.cpp
  AudioPolicyManager::setForceUse() frameworks/av/services/audiopolicy/managerdefault/AudioPolicyManager.cpp

  AudioTrack::set
  AudioFlinger::createTrack

* 参考文档
  80_NL239_28_E_LINUX_AUDIO_DEVICE_MANAGEMENT.pdf
  80-na157-193_f_linux_android_audio_customization_and_debugging_guide.pdf 客制化
