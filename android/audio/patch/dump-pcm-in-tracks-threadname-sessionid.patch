diff --git a/services/audioflinger/Threads.h b/services/audioflinger/Threads.h
index 86ebcbc..ee3e04a 100644
--- a/services/audioflinger/Threads.h
+++ b/services/audioflinger/Threads.h
@@ -479,7 +479,6 @@ protected:
                 Vector< sp<EffectChain> > mEffectChains;
 
                 static const int        kThreadNameLength = 16; // prctl(PR_SET_NAME) limit
-                char                    mThreadName[kThreadNameLength]; // guaranteed NUL-terminated
                 sp<IPowerManager>       mPowerManager;
                 sp<IBinder>             mWakeLockToken;
                 const sp<PMDeathRecipient> mDeathRecipient;
@@ -496,6 +495,8 @@ protected:
                 // A condition that must be evaluated by the thread loop has changed and
                 // we must not wait for async write callback in the thread loop before evaluating it
                 bool                    mSignalPending;
+    public:
+                char                    mThreadName[kThreadNameLength]; // guaranteed NUL-terminated
 
                 // ActiveTracks is a sorted vector of track type T representing the
                 // active tracks of threadLoop() to be considered by the locked prepare portion.
diff --git a/services/audioflinger/Tracks.cpp b/services/audioflinger/Tracks.cpp
index a7c4253..34e926f 100644
--- a/services/audioflinger/Tracks.cpp
+++ b/services/audioflinger/Tracks.cpp
@@ -25,6 +25,10 @@
 #include <sys/syscall.h>
 #include <utils/Log.h>
 
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
 #include <private/media/AudioTrackShared.h>
 
 #include "AudioFlinger.h"
@@ -649,6 +653,17 @@ status_t AudioFlinger::PlaybackThread::Track::getNextBuffer(
     } else {
         mAudioTrackServerProxy->tallyUnderrunFrames(0);
     }
+    {
+        char fname[100];
+        sprintf(fname, "/data/misc/audioserver/%s-session-%d.pcm", mThread.promote()->mThreadName, mSessionId);
+        int tmpFd = open(fname, O_CREAT | O_WRONLY | O_APPEND, 0776);
+        if ( tmpFd < 0 ) {
+                ALOGE("Fail to open dumpTrack file, error:%s", strerror(errno));
+        } else {
+                write(tmpFd, buffer->raw, buffer->frameCount * TrackBase::mChannelCount * 2);
+                close(tmpFd);
+        }
+    }
 
     return status;
 }
