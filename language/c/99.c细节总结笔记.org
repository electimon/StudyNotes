#+TITlE: C语言细节总结笔记
#+AUTHOR:      野书
#+DATE:        a date, fixed, of a format string for format-time-string
#+EMAIL:       www762268@foxmail.com
#+DESCRIPTION: 精通c语言必备知识，不为精通只为装逼！
#+KEYWORDS:    C语言
#+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)
#+TEXT:        Some descriptive text to be inserted at the beginning.
#+TEXT:        Several lines may be given.
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
#+LINK_UP:     the ``up'' link of an exported page
#+LINK_HOME:   the ``home'' link of an exported page
#+LATEX_HEADER: extra line(s) for the LaTeX header, like \usepackage{xyz}
* 三步异或法交换数字
  a ^= b;\\
  b ^= a;\\
  a ^= b;\\
* 做差法交换数字
  x=x+y; \\
  y=x-y;\\
  x=x-y;\\
* 按n位置位
  先置0
  a&=~(1<<n)
  再置1/0，i为1或0
  a|=(i<<n)
* 求余求商求积
  求余
  a&=7 <<==>> a%=8
  求商
  a>>=3 <<==>> a/=8
  求积
  a<<=3 <<==>> a*=8
  a=(a<<3)+a <<==>> a*=9
* 辗除法求最大公约数
  #+begin_src c
    while(b!=0)/*利用辗除法，直到b为0为止*/
    {
        temp=a%b;
        a=b;
        b=temp;
    }
    printf("公约数:%d\n",a);
  #+end_src
* 求数组元素个数方法
  sizeof(a)/sizeof(a[0])
* 运算符优先级
  | 优先级 | 运算符                                    | 结合性   |
  |--------+-------------------------------------------+----------|
  |      1 | () [] . ->                                | 从左到右 |
  |      2 | -(符号) ~ ++ -- *(指针) & ! (类型) sizeof | 从右向左 |
  |      3 | * / %                                     | 从左向右 |
  |      4 | +(加) -(减)                               | 从左到右 |
  |      5 | << >>                                     | 从左向右 |
  |      6 | < <= > >=                                 | 从左向右 |
  |      7 | == !=                                     | 从左到右 |
  |      8 | &(安位与)                                 | 从左到右 |
  |      9 | ^                                         | 从左到右 |
  |     10 | 按位或                                    | 从左到右 |
  |     11 | &&                                        | 从左到右 |
  |     12 | 逻辑或                                    | 从左到右 |
  |     13 | ?:                                        | 从右到左 |
  |     14 | = += -= *= /= %= &=                       | 从右到左 |
  |        | &= ^= ~= <<= >>= >>>=                     |          |
  |     15 | ,(逗号)                                   | 自左到右 |
* scanf处理字符串
  scanf("%[^\n]",str);
  用到正则表达式
* 指针题
  1. 指针的加减法：
     char   a = 100;\\
     char *p = &a;\\
     若：p的地址为0x20008000,则\\
     p+1=0x______;               0x20008001\\
     *p + 1 =0x_____;            101(我写的是10进制)\\
     (int )p + 1 = 0x______;     0x20008001\\
     (int *)p + 1 = 0x______;    0x20008004\\
     (char *)p + 1 = 0x______;   0x20008001\\
     (char)p + 1 = 0x______;     1
  2. a &a &a+1
     char a[10];\\
     a    :=&a[0]\\
     &a   :=a[0]  本质发生变化 数组地址 现象如下\\
     &a+1 :=a[10]\\
  3. 指针
     (*p)++\\
     ++(*p)\\
     *(++p)\\
     *p++\\
     *(p++)\\
  4. 设有二维数组
     int  a[3][4]= {0， 1， 2， 3， 4， 5， 6， 7， 8， 9， 10， 11};\\
     请说明以下表示形式的的含义：\\
     并写出地址值，设a的起始地址为0x2000.\\
     a表示二维数组名，那么  a==&a[0]\\
     1. *a = ______;        答：0x2000\\
        =a[0]=&a[0][0]\\
     2. a + 1, &a[1] 表示_____的首地址  a[1]\\
        (&a[1] ==  a+1)\\
     3. a[1], * (a+1) 表示的是元素______的地址。    a[1][0]\\
        &a[1][0]==a[1]==*(a+1)\\
     4. *(a[1] + 2), *(*(a+1) +2), 和a[1][2]的关系？\\
        *(a[1]+2) == *(*(a+1)+2)==a[1][2]\\
  5. 数组 int a[3][4]， 请用3-4种方法表示a[1][2]的地址？\\
     a[0]+1*4+2      0行开始   1\\
     *a+1*4+2                 2\\
     &a[1][2]        1行开始   3\\
     *(a+1)+2                 4\\
     a[1]+2                   5\\
     *(a+2)-2        2行开始   6\\
     a[2]-2                   7\\
     *(*(&a+1))-6    3行开始   8\\
     *(*(&a+1)-1)-2  末尾开始  9\\
* int const *p问题
  const int *p           定义指向const的指针（指针指向的内容不能被修改）
  int const *p           定义指向const的指针（指针指向的内容不能被修改）
  int* const p           定义const指针（由于指针本身的值不能改变所以必须得初始化）
  const int* const p     指针本身和它指向的内容都是不能被改变的所以也得到初始化
  int const* const p     指针本身和它指向的内容都是不能被改变的所以也得到初始化
* 数组和指针
  指针与一维数组
  int a[4]={0};
  + 数组名:数组第一个元素的地址
        a=&a[0]
        a+1=&a[1]
        a+i=&a[i]
  + 数组地址：表示一整个数组占的空间的首地址
        &a        :
        &a+1      :  +16个字节
  + [] : 变址运算符
        a[i]  <==>  *(a+i);
        int *p=a;  //int *p = &a[0]; ==> int *p = &(*(a+0))

        p+1 = &a[1]
        p+i = &a[i]

        a[i] == p[i] == *(a+i) == *(p+i)

        p++; //a[1];
        a++; //报错，因为a是常量
  +
* 字符数组
  char *p = "Hello World!"; //它存储在只读存储区，不能修改，如果修改会出现段错误
* 二维数组
  a[0]==&a[0][0]
  a==&a[0]==&&a[0][0]
  a[1][1]==*(&a[1][0]+1) == *(a[1]+1) == *(*(a+1)+1)
  + a[3][4]
   |  1 |  3 |  5 |  7 |
   |  9 | 11 | 13 | 15 |
   | 17 | 19 | 21 | 23 |
               &            &               &
    &a        <=      a    <=      a[0]    <=     a[0][0]
                                   数组          数组元数
    +1                +1           +1                +1
  =a的末尾地址        =a[1]       =a[0][1]        =a[0][0]+1=2
  指的是二维数       a[1]的首地址
  组的首地址
* 数组指针
  + 一维
    int b[4]={1,2,3,4}\\
    int (*p)[4];\\
    p=&b;\\
    *(*p+1)=b[1];\\
  + 二维
    二维数组的指针本质是一维指针数组
* 指针数组
* 指针函数
* 函数指针
* 函数指针数组
  int (*p[3])()       //函数指针数组 返回值是int\\
  int *(*arr[6])()    //函数指针数组 返回值是int*\\
  int *(*p(int))(int)\\
  指针函数的返回值 指向一个返回值为int* 的函数\\
* 存储方式
  data段：初始化的全局变量和静态变量\\
  bss段 ：未初始化的全局变量和静态变量， 自动清零\\
  代码段：常量 代码\\
  堆：用户分配，用户回收\\
  栈：系统分配，局部变量\\
* typedef
  + typedef int NUM[100]\\
    MUM a ;  // int a[100]\\
  + typedef char * STRING;\\
    STRING p, STRING a[10];\\
  + typedef int (*pFun)(int,int,int)\\
    pFun p, q;   <=>   int(*p)(int, int, int)\\

* define
    #define SUM(x) ((x)+(x))
* min
    #define min(a,b) (((a)>(b))?(b):(a))

